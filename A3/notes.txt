// KDF parameters
    string password = "Super secret password";
    unsigned int iterations = 15000;
    char purpose = 0; // unused by Crypto++

    // 32 bytes of derived material. Used to key the cipher.
    //   16 bytes are for the key, and 16 bytes are for the iv.
    CryptoPP::SecByteBlock derived(32);

    // KDF function
    CryptoPP::PKCS5_PBKDF2_HMAC<CryptoPP::SHA256> kdf;
    kdf.DeriveKey(derived.data(), derived.size(), purpose, (byte*)password.data(), password.size(), NULL, 0, iterations);

    // Encrypt a secret message
    string plaintext = "Attack at dawn", ciphertext, recovered;
    // Key the cipher
    CryptoPP::EAX<CryptoPP::AES>::Encryption encryptor;
    encryptor.SetKeyWithIV(derived.data(), 16, derived.data() + 16, 16);

     CryptoPP::StringSource ss( plaintext, true,
                             new CryptoPP::AuthenticatedEncryptionFilter(
                                 encryptor,
                                 new CryptoPP::StringSink(ciphertext)
                                 )
                             );
    cout << "CIPHER: " << ciphertext << endl;

//CryptoPP::AuthenticatedEncryptionFilter ef(encryptor, new CryptoPP::StringSink(ciphertext));
//    ef.Put((byte*)plaintext.data(), plaintext.size());
//    ef.MessageEnd();

// Key the cipher
//CryptoPP::EAX<CryptoPP::AES>::Decryption decryptor;
//  decryptor.SetKeyWithIV(derived.data(), 16, derived.data() + 16, 16);

//  CryptoPP::AuthenticatedDecryptionFilter df(decryptor, new CryptoPP::StringSink(recovered));
//  df.Put((byte*)ciphertext.data(), ciphertext.size());
//    df.MessageEnd();

// Done with encryption and decryption

// Encode various parameters
CryptoPP::HexEncoder encoder;
string key, iv, cipher;

encoder.Detach(new CryptoPP::StringSink(key));
encoder.Put(derived.data(), 16);
encoder.MessageEnd();

encoder.Detach(new CryptoPP::StringSink(iv));
encoder.Put(derived.data() + 16, 16);
encoder.MessageEnd();

encoder.Detach(new CryptoPP::StringSink(cipher));
encoder.Put((byte*)ciphertext.data(), ciphertext.size());
encoder.MessageEnd();

// Print stuff
cout << "plaintext: " << plaintext << endl;
cout << "key: " << key << endl;
cout << "iv: " << iv << endl;
cout << "ciphertext: " << cipher << endl;
//  cout << "recovered: " << recovered << endl;



// KDF parameters
    string password = "Super secret password";
    unsigned int iterations = 15000;
    char purpose = 0; // unused by Crypto++

    // 32 bytes of derived material. Used to key the cipher.
    //   16 bytes are for the key, and 16 bytes are for the iv.
    CryptoPP::SecByteBlock derived(32);

    // KDF function
    CryptoPP::PKCS5_PBKDF2_HMAC<CryptoPP::SHA256> kdf;
    kdf.DeriveKey(derived.data(), derived.size(), purpose, (byte*)password.data(), password.size(), NULL, 0, iterations);

    // Encrypt a secret message
    string plaintext = "Attack at dawn", ciphertext, recovered;

    // Key the cipher
    CryptoPP::EAX<CryptoPP::AES>::Encryption encryptor;
    encryptor.SetKeyWithIV(derived.data(), 16, derived.data() + 16, 16);

    CryptoPP::AuthenticatedEncryptionFilter ef(encryptor, new CryptoPP::StringSink(ciphertext));
    ef.Put((byte*)plaintext.data(), plaintext.size());
    ef.MessageEnd();

    // Key the cipher
    CryptoPP::EAX<CryptoPP::AES>::Decryption decryptor;
    decryptor.SetKeyWithIV(derived.data(), 16, derived.data() + 16, 16);

    CryptoPP::AuthenticatedDecryptionFilter df(decryptor, new CryptoPP::StringSink(recovered));
    df.Put((byte*)ciphertext.data(), ciphertext.size());
    df.MessageEnd();

    // Done with encryption and decryption

    // Encode various parameters
    CryptoPP::HexEncoder encoder;
    string key, iv, cipher;

    encoder.Detach(new CryptoPP::StringSink(key));
    encoder.Put(derived.data(), 16);
    encoder.MessageEnd();

    encoder.Detach(new CryptoPP::StringSink(iv));
    encoder.Put(derived.data() + 16, 16);
    encoder.MessageEnd();

    encoder.Detach(new CryptoPP::StringSink(cipher));
    encoder.Put((byte*)ciphertext.data(), ciphertext.size());
    encoder.MessageEnd();

    // Print stuff
    cout << "plaintext: " << plaintext << endl;
    cout << "key: " << key << endl;
    cout << "iv: " << iv << endl;
    cout << "ciphertext: " << cipher << endl;
    cout << "recovered: " << recovered << endl;
